/* -*- buffer-read-only: t -*-
 *
 *    trie.h
 *
 *    Copyright (C) 2013 by Larry Wall and others
 *
 *    You may distribute under the terms of either the GNU General Public
 *    License or the Artistic License, as specified in the README file.
 *
 * !!!!!!!   DO NOT EDIT THIS FILE   !!!!!!!
 * This file is built by regen/trie.pl from Unicode property definitions.
 * Any changes made here will be lost!
 */

#define WS_ROOT                                   0
#define WS_MATCH_85_A0                           10
#define WS_MATCH_9A80                            12
#define WS_MATCH_80                              13
#define WS_MATCH_8080to808A_80A8to80A9_80AF_819F 14
#define WS_MATCH_80to8A_A8toA9_AF                16
#define WS_MATCH_9F                              30
#define WS_MATCH_8080                            31
#define WS_LEN                                   32

static const Edge forward_whitespace[] = {
    EDGE(0x09, WS_ROOT, 0),                                  /*  0: WS_ROOT */
    EDGE(0x0A, WS_ROOT, 0),
    EDGE(0x0B, WS_ROOT, 0),
    EDGE(0x0C, WS_ROOT, 0),
    EDGE(0x0D, WS_ROOT, 0),
    EDGE(0x20, WS_ROOT, 0),
    EDGE(0xC2, WS_MATCH_85_A0, 0),
    EDGE(0xE1, WS_MATCH_9A80, 0),
    EDGE(0xE2, WS_MATCH_8080to808A_80A8to80A9_80AF_819F, 0),
    EDGE(0xE3, WS_MATCH_8080, 1),
    EDGE(0x85, WS_ROOT, 0),                                  /* 10: WS_MATCH_85_A0 */
    EDGE(0xA0, WS_ROOT, 1),
    EDGE(0x9A, WS_MATCH_80, 1),                              /* 12: WS_MATCH_9A80 */
    EDGE(0x80, WS_ROOT, 1),                                  /* 13: WS_MATCH_80 */
    EDGE(0x80, WS_MATCH_80to8A_A8toA9_AF, 0),                /* 14: WS_MATCH_8080to808A_80A8to80A9_80AF_819F */
    EDGE(0x81, WS_MATCH_9F, 1),
    EDGE(0x80, WS_ROOT, 0),                                  /* 16: WS_MATCH_80to8A_A8toA9_AF */
    EDGE(0x81, WS_ROOT, 0),
    EDGE(0x82, WS_ROOT, 0),
    EDGE(0x83, WS_ROOT, 0),
    EDGE(0x84, WS_ROOT, 0),
    EDGE(0x85, WS_ROOT, 0),
    EDGE(0x86, WS_ROOT, 0),
    EDGE(0x87, WS_ROOT, 0),
    EDGE(0x88, WS_ROOT, 0),
    EDGE(0x89, WS_ROOT, 0),
    EDGE(0x8A, WS_ROOT, 0),
    EDGE(0xA8, WS_ROOT, 0),
    EDGE(0xA9, WS_ROOT, 0),
    EDGE(0xAF, WS_ROOT, 1),
    EDGE(0x9F, WS_ROOT, 1),                                  /* 30: WS_MATCH_9F */
    EDGE(0x80, WS_MATCH_80, 1),                              /* 31: WS_MATCH_8080 */
};

#define REVWS_ROOT                   0
#define REVWS_MATCH_80E2_C2         22
#define REVWS_MATCH_E2              24
#define REVWS_MATCH_C2              25
#define REVWS_MATCH_80E2to80E3_9AE1 26
#define REVWS_MATCH_E1              28
#define REVWS_MATCH_E2toE3          29
#define REVWS_MATCH_80E2            31
#define REVWS_MATCH_81E2            32
#define REVWS_LEN                   33

static const Edge reverse_whitespace[] = {
    EDGE(0x09, REVWS_ROOT, 0),                  /*  0: REVWS_ROOT */
    EDGE(0x0A, REVWS_ROOT, 0),
    EDGE(0x0B, REVWS_ROOT, 0),
    EDGE(0x0C, REVWS_ROOT, 0),
    EDGE(0x0D, REVWS_ROOT, 0),
    EDGE(0x20, REVWS_ROOT, 0),
    EDGE(0x80, REVWS_MATCH_80E2to80E3_9AE1, 0),
    EDGE(0x81, REVWS_MATCH_80E2, 0),
    EDGE(0x82, REVWS_MATCH_80E2, 0),
    EDGE(0x83, REVWS_MATCH_80E2, 0),
    EDGE(0x84, REVWS_MATCH_80E2, 0),
    EDGE(0x85, REVWS_MATCH_80E2_C2, 0),
    EDGE(0x86, REVWS_MATCH_80E2, 0),
    EDGE(0x87, REVWS_MATCH_80E2, 0),
    EDGE(0x88, REVWS_MATCH_80E2, 0),
    EDGE(0x89, REVWS_MATCH_80E2, 0),
    EDGE(0x8A, REVWS_MATCH_80E2, 0),
    EDGE(0x9F, REVWS_MATCH_81E2, 0),
    EDGE(0xA0, REVWS_MATCH_C2, 0),
    EDGE(0xA8, REVWS_MATCH_80E2, 0),
    EDGE(0xA9, REVWS_MATCH_80E2, 0),
    EDGE(0xAF, REVWS_MATCH_80E2, 1),
    EDGE(0x80, REVWS_MATCH_E2, 0),              /* 22: REVWS_MATCH_80E2_C2 */
    EDGE(0xC2, REVWS_ROOT, 1),
    EDGE(0xE2, REVWS_ROOT, 1),                  /* 24: REVWS_MATCH_E2 */
    EDGE(0xC2, REVWS_ROOT, 1),                  /* 25: REVWS_MATCH_C2 */
    EDGE(0x80, REVWS_MATCH_E2toE3, 0),          /* 26: REVWS_MATCH_80E2to80E3_9AE1 */
    EDGE(0x9A, REVWS_MATCH_E1, 1),
    EDGE(0xE1, REVWS_ROOT, 1),                  /* 28: REVWS_MATCH_E1 */
    EDGE(0xE2, REVWS_ROOT, 0),                  /* 29: REVWS_MATCH_E2toE3 */
    EDGE(0xE3, REVWS_ROOT, 1),
    EDGE(0x80, REVWS_MATCH_E2, 1),              /* 31: REVWS_MATCH_80E2 */
    EDGE(0x81, REVWS_MATCH_E2, 1),              /* 32: REVWS_MATCH_81E2 */
};


/* ex: set ro: */
